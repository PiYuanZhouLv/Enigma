import hashlib
import os
import pickle
import random


class Swap:
    lookup = []
    left = []
    right = []

    def __init__(self, sw=None, **swap):
        if sw:
            swap = sw
        s = list(swap.keys()) + list(swap.values())
        s2 = list(set(s))
        if len(s) != len(s2):
            raise ValueError("Repeat letter in '**swap'.")
        self.lookup = s2
        self.left = list(swap.keys())
        self.right = list(swap.values())

    def swap(self, letter, *args, **configs):
        if letter not in self.lookup:
            return letter
        if letter in self.left:
            return self.right[self.left.index(letter)]
        else:
            return self.left[self.right.index(letter)]


class Wheel:
    left = []
    right = []
    seek = 0
    start = 0

    def __init__(self, *wheel, left=None):
        w = set(wheel)
        w2 = list(w)
        if len(w2) != len(wheel):
            raise ValueError("Repeat letter in '*wheel'.")
        if not left:
            left = w2
            left.sort()
        else:
            if len(left) != len(w2):
                raise ValueError("'*wheel' and 'left' are not matched")
            else:
                for i in left:
                    if i not in w2:
                        raise ValueError("'*wheel' and 'left' are not matched")
        self.left = left
        self.right = wheel

    def change(self, letter, *args, **configs):
        if letter not in self.left:
            return letter
        return self.right[(self.seek + self.left.index(letter)) % len(self.left)]

    def r_change(self, letter, *args, **configs):
        if letter not in self.right:
            return letter
        return self.left[((self.right.index(letter) - self.seek + len(self.right)) % len(self.right))]

    def set_position(self, letter):
        if letter not in self.right:
            raise ValueError(f"Letter '{letter}' not in wheel")
        self.start = self.seek = self.right.index(letter)

    def turn(self, *args, **configs):
        self.seek += 1
        self.seek %= len(self.left)
        if self.seek == 0:
            return True
        else:
            return False


class Reflect:
    left = []
    right = []
    lookup = []

    def __init__(self, re=None, **reflect):
        if re:
            reflect = re
        r = list(reflect.keys()) + list(reflect.values())
        r2 = list(set(r))
        if len(r) != len(r2):
            raise ValueError("Repeat letter in '**reflect'.")
        self.left = list(reflect.keys())
        self.right = list(reflect.values())
        self.lookup = r2

    def reflect(self, letter, *args, **configs):
        if letter not in self.lookup:
            return letter
        if letter in self.left:
            return self.right[self.left.index(letter)]
        else:
            return self.left[self.right.index(letter)]


class Enigma:
    _swap = None
    _wheels = []
    _reflect = None
    _translate = None

    def __init__(self, swap=None, wheels=None, reflect=None):
        self._swap = swap
        self._wheels = wheels if wheels else []
        self._reflect = reflect

    def wheels(self, *wheels):
        self._wheels = wheels

    def swap(self, swap):
        self._swap = swap

    def reflect(self, reflect):
        self._reflect = reflect

    def translate(self, translate):
        self._translate = translate

    def set_position(self, *position):
        if len(position) != len(self._wheels):
            raise ValueError(f"The number of given position is {len(position)}, but need {len(self._wheels)}")
        for (w, p) in zip(self._wheels, position):
            w.set_position(p)

    def encipher(self, words, *args, **configs):
        if not (self._wheels and self._swap and self._reflect):
            raise Exception("Require swap, wheels and reflect")
        if self._translate:
            translated = self._translate.tran(words, *args, **configs)
        else:
            translated = words
        new = []
        for w in translated:
            w = self._swap.swap(w, *args, **configs)
            for wh in self._wheels:
                w = wh.change(w, *args, **configs)
            w = self._reflect.reflect(w, *args, **configs)
            for whi in range(len(self._wheels) - 1, -1, -1):
                wh = self._wheels[whi]
                w = wh.r_change(w, *args, **configs)
            w = self._swap.swap(w, *args, **configs)
            new.append(w)
            for wh in self._wheels:
                if not wh.turn(*args, **configs):
                    break
        if self._translate:
            return self._translate.r_tran(new, *args, **configs)
        else:
            return ''.join(new)


class ToolsGroup:
    _swaps = []
    _wheels = []
    _reflects = []
    _translate = None

    def __init__(self, swaps=None, wheels=None, reflects=None):
        self._swaps = swaps or []
        self._wheels = wheels or []
        self._reflects = reflects or []

    def wheels(self, *wheels):
        self._wheels = wheels

    def swaps(self, *swaps):
        self._swaps = swaps

    def reflects(self, *reflects):
        self._reflects = reflects

    def translate(self, translate):
        self._translate = translate

    def make_up(self, swap, wheels, reflect):
        e = Enigma()
        if self._translate:
            e.translate(self._translate)
        e.swap(self._swaps[swap])
        e.wheels(*[self._wheels[w] for w in wheels])
        e.reflect(self._reflects[reflect])
        return e

    def random(self, num):
        s = random.randint(0, len(self._swaps) - 1)
        ws = list(range(len(self._wheels)))
        ws.sort(key=lambda x: random.random())
        ws = ws[:num]
        r = random.randint(0, len(self._reflects) - 1)
        return self.make_up(s, ws, r), (s, ws, r)


asciitools = ToolsGroup()


class AsciiTran:
    @staticmethod
    def tran(letter, *args, **configs):
        return letter.lower()

    @staticmethod
    def r_tran(letter, *args, **configs):
        return ''.join(letter)


asciitools.translate(AsciiTran)
asciiswap1 = Swap(**{
    'a': 'd',
    'c': 'b',
    'e': 'f',
    'g': 'h',
    'i': 'j',
    'k': 'l',
    'm': 'n',
    'o': 'r',
    'x': 'z',
    'y': 'q'
})
asciiswap2 = Swap(**{
    'a': 'z',
    'b': 'y',
    'c': 'x',
    'd': 's',
    'e': 'g',
    'f': 'j',
    'v': 'i',
    'o': 'p',
    'r': 'w',
    't': 'm'
})
asciiswap3 = Swap(**{
    'c': 'z',
    'd': 'y',
    'i': 'x',
    'e': 'u',
    'v': 'g',
    't': 'j',
    's': 'n',
    'o': 'p',
    'l': 'w',
    'q': 'm'
})
asciitools.swaps(asciiswap1, asciiswap2, asciiswap3)
asciiwheel1 = Wheel(*list("qwertyuiopasdfghjklzxcvbnm"))
asciiwheel2 = Wheel(*list("qazwsxedcrfvtgbyhnujmikolp"))
asciiwheel3 = Wheel(*list("plokmijnuhbygvtfcrdxeszwaq"))
asciiwheel4 = Wheel(*list("abcdefghijklmnopqrstuvwxyz"))
asciiwheel5 = Wheel(*list("mnbvcxzaqwertyuioplkjhgfds"))
asciiwheel6 = Wheel(*list("qpwoeirutyalskdjfhgzmxncbv"))
asciiwheel7 = Wheel(*list("qzawxsecdrvftbgynhumjikolp"))
asciiwheel8 = Wheel(*list("zpxocivubyntmrlewkqjahsgdf"))
asciitools.wheels(asciiwheel1, asciiwheel2, asciiwheel3, asciiwheel4,
                  asciiwheel5, asciiwheel6, asciiwheel7, asciiwheel8)
asciire1 = Reflect(**{
    'a': 'b',
    'c': 'd',
    'e': 'f',
    'g': 'h',
    'i': 'j',
    'k': 'l',
    'm': 'n',
    'o': 'p',
    'q': 'r',
    's': 't',
    'u': 'v',
    'w': 'x',
    'y': 'z'
})
asciire2 = Reflect(**{
    'a': 'z',
    'c': 'x',
    'e': 'v',
    'g': 't',
    'i': 'r',
    'k': 'p',
    'm': 'n',
    'o': 'l',
    'q': 'j',
    's': 'h',
    'u': 'f',
    'w': 'd',
    'y': 'b'
})
asciire3 = Reflect(**{
    'q': 'w',
    'e': 'r',
    't': 'y',
    'u': 'i',
    'o': 'p',
    'a': 's',
    'd': 'f',
    'g': 'h',
    'j': 'k',
    'l': 'z',
    'x': 'c',
    'v': 'b',
    'n': 'm'
})
asciire4 = Reflect(**{
    'q': 'z',
    'w': 'x',
    'e': 'c',
    'r': 'v',
    't': 'b',
    'y': 'n',
    'u': 'm',
    'i': 'o',
    'p': 'l',
    'a': 'k',
    's': 'j',
    'd': 'h',
    'f': 'g'
})
asciitools.reflects(asciire1, asciire2, asciire3, asciire4)

bytetools = ToolsGroup()


class ByteTran:
    @staticmethod
    def tran(letters, *args, **configs):
        if type(letters) == bytes:
            return list(letters)
        b = letters.encode('utf-8')
        return list(b)

    @staticmethod
    def r_tran(letters, *args, **configs):
        b = b''.join([bytes.fromhex(hex(le)[2:].rjust(2, "0")) for le in letters])
        if 'return char' in args \
                or ('return' in configs and configs['return'] == 'char') \
                or 'decrypt' in args \
                or ('type' in configs and configs['type'] == 'decrypt'):
            return b.decode('utf-8')
        return b


bytetools.translate(ByteTran)
byteswap1 = Swap({172: 5, 80: 29, 203: 69, 90: 254, 147: 42, 135: 188, 191: 190, 95: 113, 173: 94, 127: 70, 72: 24,
                  124: 43, 50: 159, 174: 193, 33: 241, 36: 225, 245: 38, 179: 46, 243: 208, 6: 79, 73: 196, 164: 178,
                  75: 184, 121: 125, 248: 211, 7: 19, 242: 132, 63: 13, 71: 34, 31: 52, 11: 163, 228: 212, 170: 157,
                  166: 152, 154: 223, 109: 76, 136: 88, 53: 110, 215: 139, 92: 96, 111: 64, 91: 57, 102: 227,
                  141: 236, 26: 182, 48: 56, 209: 255, 155: 114, 137: 129, 180: 216, 153: 226, 161: 247, 14: 244,
                  158: 30, 221: 103, 86: 18, 186: 104, 160: 74, 149: 77, 222: 84, 162: 251, 128: 177, 122: 197, 4: 89,
                  205: 16, 183: 0, 120: 224, 130: 169, 3: 100, 51: 176, 68: 143, 252: 134, 175: 81, 119: 21, 146: 250,
                  231: 116, 246: 230, 171: 23, 234: 207, 189: 194, 201: 40, 151: 232, 8: 58, 150: 198, 133: 67,
                  105: 28, 148: 131, 10: 217, 229: 210, 44: 253, 112: 239, 59: 15, 82: 118, 106: 32, 49: 218,
                  185: 144, 85: 168, 199: 165, 87: 187, 200: 61})
byteswap2 = Swap({218: 146, 252: 61, 217: 39, 165: 35, 4: 2, 108: 86, 99: 233, 230: 189, 206: 183, 149: 120, 209: 167,
                  19: 249, 156: 1, 169: 71, 21: 150, 141: 12, 54: 107, 139: 248, 212: 250, 191: 67, 53: 28, 213: 216,
                  134: 244, 151: 174, 65: 124, 196: 46, 210: 85, 132: 69, 18: 175, 135: 133, 16: 203, 102: 225,
                  78: 50, 231: 207, 63: 253, 24: 48, 177: 17, 122: 214, 195: 27, 246: 40, 92: 254, 181: 140, 30: 7,
                  59: 70, 36: 55, 60: 148, 100: 6, 219: 23, 121: 182, 84: 89, 37: 166, 211: 64, 13: 66, 170: 163,
                  110: 234, 82: 129, 83: 243, 10: 232, 105: 14, 56: 3, 168: 185, 117: 51, 25: 94, 79: 97, 127: 115,
                  204: 87, 194: 11, 73: 155, 49: 77, 201: 222, 32: 34, 171: 197, 136: 74, 251: 44, 190: 138, 235: 91,
                  205: 187, 75: 131, 9: 224, 111: 57, 180: 112, 76: 239, 52: 143, 88: 103, 153: 31, 137: 38, 62: 58,
                  144: 192, 208: 95, 164: 159, 45: 123, 5: 229, 184: 98, 228: 130, 186: 116, 96: 142, 221: 179,
                  147: 157, 113: 220, 126: 68})
byteswap3 = Swap({62: 55, 1: 193, 144: 199, 0: 54, 188: 163, 223: 89, 247: 58, 164: 203, 167: 150, 208: 75, 196: 214,
                  185: 68, 2: 23, 125: 245, 46: 124, 192: 87, 113: 149, 119: 133, 191: 105, 107: 104, 127: 73, 250: 4,
                  242: 130, 176: 123, 155: 84, 38: 41, 72: 95, 172: 169, 236: 143, 120: 241, 246: 175, 148: 180,
                  232: 8, 204: 227, 19: 100, 85: 71, 207: 160, 91: 128, 209: 198, 35: 156, 219: 166, 197: 101,
                  74: 230, 134: 13, 59: 70, 213: 183, 24: 94, 154: 12, 3: 33, 69: 174, 115: 137, 79: 184, 212: 126,
                  103: 216, 39: 206, 132: 170, 158: 229, 117: 20, 14: 30, 145: 239, 243: 57, 121: 146, 254: 152,
                  27: 251, 22: 218, 234: 201, 161: 129, 32: 66, 215: 86, 235: 25, 157: 98, 168: 29, 110: 51, 111: 202,
                  162: 233, 48: 140, 200: 99, 36: 7, 205: 63, 109: 217, 122: 189, 225: 220, 82: 92, 65: 76, 177: 28,
                  60: 80, 210: 21, 6: 244, 147: 52, 34: 96, 10: 252, 11: 173, 50: 142, 97: 190, 179: 135, 222: 224,
                  151: 211, 195: 102, 43: 255, 47: 106})
byteswap4 = Swap({46: 164, 180: 129, 213: 182, 81: 94, 49: 136, 36: 64, 167: 57, 100: 35, 190: 45, 226: 231, 53: 184,
                  51: 178, 5: 215, 168: 54, 221: 249, 12: 66, 150: 179, 124: 155, 236: 158, 175: 138, 112: 6,
                  203: 224, 144: 201, 110: 18, 65: 128, 68: 227, 92: 142, 58: 72, 189: 95, 198: 38, 2: 214, 97: 117,
                  50: 106, 90: 67, 200: 43, 13: 153, 247: 63, 156: 102, 193: 28, 30: 113, 70: 188, 114: 87, 27: 99,
                  15: 14, 24: 210, 71: 169, 172: 39, 238: 223, 157: 73, 62: 69, 207: 17, 255: 197, 225: 252, 119: 232,
                  218: 195, 217: 109, 83: 202, 186: 34, 165: 21, 137: 33, 123: 121, 125: 48, 103: 240, 222: 98,
                  86: 147, 78: 161, 141: 148, 134: 8, 41: 216, 185: 89, 126: 133, 176: 199, 132: 11, 143: 23,
                  127: 146, 131: 253, 163: 220, 40: 151, 234: 212, 10: 32, 101: 85, 251: 88, 162: 104, 209: 75,
                  105: 140, 181: 242, 250: 96, 192: 60, 61: 229, 160: 7, 191: 16, 173: 111, 82: 22, 80: 166, 187: 243,
                  233: 204, 37: 170, 237: 19, 0: 91, 3: 20})
byteswap5 = Swap({213: 161, 231: 84, 217: 39, 74: 22, 177: 75, 112: 122, 184: 26, 159: 212, 174: 152, 120: 105,
                  114: 172, 242: 41, 209: 146, 68: 170, 150: 34, 211: 106, 100: 137, 131: 25, 36: 203, 78: 49, 92: 97,
                  86: 54, 124: 0, 20: 24, 6: 21, 155: 228, 71: 190, 115: 229, 12: 33, 180: 66, 255: 52, 16: 156,
                  244: 81, 149: 62, 8: 246, 188: 226, 129: 102, 28: 47, 48: 98, 37: 248, 4: 133, 14: 53, 224: 218,
                  125: 80, 198: 153, 17: 139, 107: 166, 148: 144, 200: 230, 29: 91, 168: 58, 234: 94, 67: 142,
                  72: 185, 11: 250, 1: 143, 134: 219, 7: 77, 241: 118, 208: 186, 19: 27, 30: 243, 160: 173, 128: 38,
                  251: 101, 238: 123, 245: 194, 141: 205, 90: 15, 42: 232, 46: 247, 2: 181, 127: 57, 40: 167,
                  221: 109, 182: 99, 164: 175, 79: 70, 199: 202, 163: 165, 214: 187, 135: 136, 222: 201, 196: 64,
                  193: 65, 151: 13, 32: 210, 154: 96, 59: 88, 235: 69, 204: 60, 35: 121, 93: 216, 103: 76, 55: 140,
                  82: 113, 197: 162, 252: 236, 50: 85, 63: 18})
byteswap6 = Swap({167: 240, 173: 202, 152: 187, 95: 86, 40: 108, 94: 190, 178: 45, 73: 67, 181: 22, 70: 186, 216: 254,
                  33: 241, 68: 197, 195: 50, 230: 42, 219: 20, 7: 179, 38: 58, 106: 215, 17: 252, 54: 135, 157: 141,
                  72: 137, 160: 247, 87: 104, 0: 143, 188: 239, 145: 96, 139: 102, 97: 10, 183: 88, 158: 177, 24: 226,
                  14: 227, 90: 46, 109: 228, 168: 8, 85: 89, 52: 198, 122: 218, 78: 83, 151: 57, 110: 127, 147: 224,
                  112: 204, 134: 201, 111: 6, 154: 248, 100: 185, 98: 71, 207: 34, 32: 231, 62: 121, 123: 82, 107: 91,
                  229: 170, 176: 251, 116: 172, 138: 128, 203: 196, 189: 75, 164: 233, 74: 48, 43: 214, 200: 26,
                  220: 232, 223: 36, 103: 124, 47: 28, 2: 21, 93: 69, 60: 191, 131: 9, 217: 11, 146: 35, 61: 250,
                  118: 59, 142: 113, 5: 41, 115: 171, 125: 194, 136: 242, 30: 156, 148: 29, 79: 206, 210: 243,
                  236: 199, 238: 80, 140: 15, 92: 66, 255: 130, 53: 132, 126: 27, 192: 180, 166: 16, 161: 18, 44: 150,
                  119: 159, 244: 209, 12: 114})
bytetools.swaps(byteswap1, byteswap2, byteswap3, byteswap4, byteswap5, byteswap6)
bytewheel1 = Wheel(*[84, 1, 91, 215, 15, 184, 247, 227, 78, 97, 21, 32, 238, 63, 40, 195, 19, 157, 132, 139, 66, 103,
                     153, 148, 73, 93, 158, 88, 160, 133, 232, 228, 54, 229, 58, 142, 190, 94, 193, 113, 109, 22, 36,
                     38, 147, 246, 131, 134, 124, 77, 27, 56, 51, 152, 236, 41, 127, 11, 213, 107, 176, 74, 96, 248,
                     144, 178, 224, 130, 202, 102, 233, 163, 254, 135, 204, 217, 199, 46, 185, 211, 168, 243, 146, 2,
                     170, 100, 60, 82, 50, 155, 140, 169, 129, 28, 175, 219, 122, 72, 12, 31, 138, 182, 39, 174, 214,
                     189, 210, 200, 111, 117, 64, 241, 95, 154, 85, 249, 68, 198, 71, 119, 44, 201, 205, 69, 250, 45,
                     35, 180, 137, 25, 26, 10, 208, 151, 33, 42, 164, 3, 186, 197, 251, 242, 150, 105, 62, 70, 4, 61,
                     223, 173, 92, 203, 115, 79, 30, 90, 49, 34, 234, 179, 81, 191, 141, 9, 172, 13, 162, 112, 226,
                     187, 165, 5, 83, 220, 6, 166, 167, 194, 188, 145, 16, 114, 171, 192, 76, 55, 106, 29, 235, 206, 99,
                     67, 65, 37, 244, 183, 125, 118, 121, 7, 47, 216, 231, 43, 222, 123, 221, 104, 161, 86, 156, 57,
                     126, 17, 59, 128, 240, 116, 23, 237, 143, 110, 108, 196, 245, 159, 177, 53, 14, 207, 87, 80, 218,
                     255, 52, 75, 181, 253, 225, 120, 230, 149, 98, 252, 48, 239, 8, 20, 0, 89, 18, 101, 212, 209, 136,
                     24])
bytewheel2 = Wheel(*[13, 15, 111, 235, 27, 5, 224, 132, 176, 73, 206, 37, 238, 70, 214, 63, 61, 102, 55, 253, 79, 249,
                     24, 157, 33, 131, 82, 74, 231, 194, 11, 90, 106, 200, 126, 9, 17, 164, 109, 39, 154, 122, 244, 168,
                     97, 133, 188, 161, 248, 180, 228, 89, 252, 40, 158, 104, 151, 85, 32, 29, 216, 118, 31, 183, 254,
                     56, 186, 83, 167, 110, 236, 246, 202, 155, 92, 26, 192, 116, 129, 225, 94, 175, 134, 71, 43, 205,
                     88, 67, 77, 1, 4, 36, 187, 12, 179, 49, 251, 103, 197, 210, 182, 80, 119, 127, 46, 115, 242, 178,
                     69, 99, 47, 59, 150, 245, 215, 219, 135, 152, 44, 137, 8, 193, 66, 233, 196, 140, 147, 156, 247,
                     232, 3, 153, 184, 100, 162, 117, 250, 138, 72, 148, 204, 229, 226, 130, 124, 207, 76, 10, 237, 30,
                     149, 174, 93, 243, 60, 230, 41, 50, 20, 84, 217, 208, 163, 14, 75, 223, 57, 0, 51, 125, 121, 201,
                     142, 203, 195, 45, 171, 190, 6, 98, 16, 101, 199, 185, 172, 96, 212, 65, 38, 241, 53, 239, 220,
                     189, 62, 141, 19, 54, 87, 42, 95, 123, 240, 68, 78, 2, 181, 114, 81, 23, 64, 159, 144, 227, 255,
                     52, 105, 7, 234, 58, 120, 35, 177, 112, 160, 136, 48, 221, 107, 25, 113, 170, 34, 213, 139, 166,
                     209, 191, 108, 198, 143, 91, 86, 146, 18, 128, 28, 222, 145, 21, 211, 22, 165, 169, 173, 218])
bytewheel3 = Wheel(*[141, 206, 16, 114, 65, 6, 165, 102, 111, 231, 155, 248, 169, 7, 51, 168, 72, 160, 30, 31, 5, 250,
                     86, 170, 197, 33, 234, 122, 58, 173, 13, 190, 251, 208, 179, 249, 144, 105, 164, 147, 130, 133,
                     161, 181, 128, 146, 154, 176, 200, 88, 202, 60, 188, 93, 153, 79, 186, 123, 103, 193, 50, 211, 135,
                     152, 21, 222, 8, 25, 219, 157, 17, 35, 19, 45, 84, 201, 127, 215, 175, 225, 199, 230, 12, 131, 87,
                     36, 22, 89, 244, 145, 118, 90, 166, 117, 9, 189, 26, 20, 47, 27, 11, 63, 171, 110, 68, 204, 70, 46,
                     247, 195, 100, 38, 94, 228, 213, 184, 126, 156, 223, 129, 98, 75, 4, 14, 104, 53, 237, 37, 69, 238,
                     3, 242, 113, 92, 254, 177, 107, 67, 85, 137, 151, 233, 148, 54, 198, 119, 120, 212, 143, 192, 108,
                     77, 226, 167, 163, 59, 32, 229, 174, 245, 74, 10, 241, 95, 34, 220, 49, 124, 39, 97, 106, 96, 209,
                     61, 255, 172, 83, 40, 125, 180, 191, 76, 243, 227, 205, 0, 138, 101, 178, 236, 55, 187, 203, 196,
                     235, 71, 28, 149, 56, 210, 136, 44, 81, 134, 66, 246, 18, 2, 48, 1, 252, 43, 29, 221, 224, 99, 185,
                     139, 150, 214, 218, 15, 194, 121, 82, 183, 253, 41, 80, 216, 42, 73, 64, 116, 52, 112, 239, 78, 24,
                     109, 232, 23, 91, 57, 142, 162, 182, 158, 159, 132, 115, 140, 207, 240, 62, 217])
bytewheel4 = Wheel(*[21, 143, 92, 188, 40, 192, 3, 211, 182, 173, 107, 55, 219, 112, 14, 120, 70, 47, 59, 208, 177, 110,
                     244, 85, 232, 235, 62, 209, 237, 255, 157, 207, 121, 243, 129, 11, 206, 159, 67, 193, 66, 254, 210,
                     101, 25, 28, 151, 197, 5, 160, 212, 187, 196, 7, 140, 178, 174, 32, 213, 144, 183, 134, 150, 90,
                     63, 60, 99, 118, 42, 71, 81, 54, 88, 128, 246, 132, 229, 96, 65, 250, 12, 72, 154, 122, 217, 203,
                     130, 242, 137, 75, 10, 64, 39, 165, 230, 100, 191, 9, 131, 116, 58, 105, 104, 123, 124, 202, 80,
                     135, 50, 175, 83, 84, 61, 153, 38, 51, 97, 216, 108, 13, 91, 79, 31, 35, 8, 222, 226, 167, 126,
                     146, 52, 241, 249, 200, 171, 19, 119, 166, 34, 168, 181, 95, 48, 106, 77, 169, 145, 26, 228, 29, 1,
                     214, 176, 74, 41, 15, 109, 18, 68, 231, 27, 204, 142, 201, 86, 43, 189, 234, 163, 22, 46, 223, 221,
                     252, 4, 233, 78, 184, 30, 111, 2, 180, 57, 20, 138, 194, 125, 247, 17, 227, 190, 148, 170, 215,
                     115, 16, 164, 218, 127, 248, 152, 240, 33, 185, 238, 23, 69, 224, 103, 199, 93, 251, 147, 94, 114,
                     161, 24, 98, 245, 198, 76, 149, 113, 6, 136, 172, 117, 102, 0, 162, 186, 141, 53, 155, 225, 139,
                     89, 44, 37, 156, 195, 45, 133, 179, 49, 158, 82, 87, 73, 205, 220, 236, 36, 253, 56, 239])
bytewheel5 = Wheel(*[82, 246, 64, 20, 57, 169, 48, 36, 233, 129, 113, 177, 146, 75, 173, 193, 47, 142, 232, 206, 93,
                     122, 132, 134, 250, 53, 106, 84, 14, 60, 249, 46, 136, 88, 67, 157, 54, 153, 201, 151, 170, 202,
                     29, 115, 237, 138, 81, 18, 230, 61, 189, 130, 195, 192, 182, 121, 40, 178, 90, 204, 217, 123, 244,
                     190, 37, 251, 24, 112, 44, 155, 62, 158, 68, 12, 52, 148, 159, 171, 91, 162, 220, 102, 120, 223,
                     33, 215, 128, 65, 27, 210, 255, 226, 17, 254, 109, 71, 247, 127, 180, 222, 253, 86, 229, 58, 70,
                     239, 101, 231, 25, 144, 103, 77, 66, 74, 118, 43, 11, 76, 245, 69, 208, 219, 5, 63, 117, 238, 4,
                     97, 140, 83, 164, 32, 131, 186, 205, 15, 214, 216, 73, 174, 116, 94, 2, 187, 145, 34, 194, 203,
                     125, 23, 39, 19, 188, 252, 191, 78, 89, 197, 28, 51, 234, 45, 135, 241, 98, 9, 80, 111, 10, 198,
                     31, 227, 30, 147, 22, 221, 235, 21, 41, 176, 248, 56, 55, 172, 96, 104, 119, 85, 185, 35, 209, 213,
                     108, 181, 26, 207, 196, 243, 236, 183, 50, 42, 152, 114, 218, 240, 160, 163, 16, 228, 3, 7, 105,
                     175, 126, 0, 72, 92, 137, 225, 8, 179, 79, 49, 133, 100, 166, 107, 95, 242, 211, 124, 6, 13, 150,
                     224, 143, 200, 161, 168, 165, 212, 87, 38, 167, 1, 99, 154, 139, 59, 141, 149, 199, 184, 110, 156])
bytewheel6 = Wheel(*[133, 57, 127, 16, 145, 131, 112, 252, 8, 232, 148, 67, 3, 248, 221, 225, 237, 229, 191, 227, 173,
                     183, 108, 94, 59, 83, 42, 197, 129, 136, 117, 20, 186, 6, 69, 239, 164, 240, 244, 48, 33, 174, 205,
                     21, 22, 47, 53, 223, 204, 208, 39, 206, 217, 254, 226, 230, 138, 41, 87, 150, 144, 25, 159, 176,
                     140, 49, 77, 243, 5, 0, 211, 135, 128, 84, 102, 63, 26, 91, 166, 188, 32, 202, 36, 214, 81, 149,
                     181, 215, 31, 109, 99, 104, 23, 43, 192, 10, 154, 134, 18, 100, 105, 187, 220, 114, 88, 126, 171,
                     73, 38, 178, 193, 236, 76, 15, 141, 118, 14, 97, 143, 80, 165, 219, 246, 92, 35, 24, 130, 116, 168,
                     64, 194, 123, 152, 121, 182, 58, 199, 120, 74, 180, 247, 250, 50, 79, 222, 218, 46, 89, 195, 196,
                     30, 203, 37, 85, 86, 147, 184, 155, 65, 158, 255, 72, 253, 198, 113, 45, 245, 200, 106, 137, 68,
                     162, 175, 234, 161, 213, 151, 95, 142, 169, 28, 56, 40, 231, 139, 34, 241, 103, 249, 13, 224, 242,
                     17, 55, 2, 160, 170, 9, 27, 29, 11, 54, 190, 172, 228, 44, 153, 163, 235, 71, 216, 19, 61, 119, 96,
                     209, 4, 115, 111, 189, 167, 62, 210, 78, 201, 233, 125, 98, 212, 7, 251, 101, 60, 157, 177, 75, 52,
                     179, 124, 156, 122, 146, 107, 90, 1, 82, 207, 110, 93, 66, 70, 12, 238, 51, 132, 185])
bytewheel7 = Wheel(*[45, 34, 80, 98, 113, 30, 22, 238, 154, 61, 32, 58, 206, 249, 161, 194, 140, 189, 101, 117, 9, 99,
                     18, 132, 20, 217, 70, 104, 28, 163, 250, 137, 188, 72, 151, 202, 253, 53, 60, 181, 40, 74, 19, 5,
                     77, 16, 177, 170, 164, 92, 236, 169, 147, 76, 112, 243, 107, 66, 88, 131, 82, 106, 199, 171, 156,
                     15, 126, 215, 226, 244, 62, 96, 197, 3, 11, 221, 229, 210, 120, 136, 52, 191, 54, 203, 127, 26, 31,
                     125, 121, 128, 122, 134, 166, 6, 227, 239, 14, 190, 84, 153, 1, 103, 116, 4, 159, 68, 255, 174,
                     168, 167, 246, 150, 158, 231, 69, 63, 7, 214, 237, 139, 87, 133, 254, 218, 247, 85, 176, 44, 195,
                     207, 148, 240, 172, 90, 196, 186, 23, 175, 39, 179, 201, 73, 97, 223, 220, 94, 143, 204, 178, 130,
                     142, 108, 49, 213, 95, 109, 12, 78, 21, 83, 152, 110, 251, 37, 187, 234, 219, 224, 216, 193, 59,
                     124, 242, 119, 165, 24, 182, 135, 208, 105, 157, 149, 35, 173, 51, 46, 111, 233, 81, 211, 65, 235,
                     225, 180, 33, 241, 50, 118, 27, 71, 47, 48, 230, 91, 209, 185, 8, 144, 205, 64, 183, 162, 198, 222,
                     10, 41, 2, 114, 192, 86, 160, 138, 145, 123, 17, 57, 100, 29, 146, 248, 212, 75, 55, 252, 79, 25,
                     141, 102, 228, 155, 200, 115, 42, 67, 13, 56, 245, 43, 89, 232, 129, 184, 93, 36, 0, 38])
bytewheel8 = Wheel(*[252, 74, 4, 209, 247, 39, 250, 99, 172, 224, 216, 159, 132, 176, 105, 26, 148, 195, 222, 100, 113,
                     135, 201, 57, 243, 205, 71, 203, 218, 163, 19, 165, 54, 12, 79, 15, 18, 50, 197, 157, 171, 3, 125,
                     153, 145, 251, 192, 61, 90, 137, 227, 182, 128, 43, 207, 141, 183, 180, 160, 109, 106, 245, 249,
                     206, 204, 103, 91, 37, 119, 147, 184, 75, 223, 226, 14, 102, 88, 156, 46, 112, 0, 73, 44, 95, 191,
                     202, 80, 27, 233, 13, 84, 215, 124, 47, 181, 168, 210, 217, 138, 31, 94, 117, 70, 120, 63, 123,
                     161, 87, 239, 34, 58, 228, 187, 164, 134, 5, 67, 248, 11, 51, 40, 154, 115, 253, 41, 111, 208, 155,
                     114, 60, 190, 1, 96, 8, 104, 24, 170, 177, 30, 143, 198, 152, 255, 185, 199, 36, 16, 200, 17, 78,
                     29, 21, 189, 225, 2, 126, 72, 213, 35, 130, 232, 25, 97, 92, 9, 93, 85, 167, 48, 42, 196, 234, 64,
                     76, 68, 158, 242, 131, 52, 146, 186, 240, 98, 244, 127, 23, 212, 188, 89, 108, 162, 56, 241, 7,
                     149, 211, 116, 20, 231, 10, 33, 174, 194, 53, 151, 235, 77, 110, 136, 193, 140, 214, 139, 59, 178,
                     221, 82, 179, 49, 28, 65, 107, 238, 220, 144, 175, 173, 86, 101, 121, 246, 62, 45, 118, 69, 122,
                     219, 229, 142, 237, 230, 32, 55, 150, 236, 129, 22, 169, 254, 66, 166, 38, 81, 83, 6, 133])
bytetools.wheels(bytewheel1, bytewheel2, bytewheel3, bytewheel4,
                 bytewheel5, bytewheel6, bytewheel7, bytewheel8)
bytere1 = Reflect({226: 138, 87: 57, 193: 52, 164: 48, 235: 40, 51: 155, 39: 8, 115: 135, 182: 33, 130: 111, 35: 234,
                   2: 23, 73: 118, 20: 6, 239: 122, 169: 41, 222: 0, 161: 160, 82: 119, 112: 21, 86: 116, 232: 85,
                   180: 252, 200: 104, 158: 80, 100: 171, 149: 61, 221: 62, 241: 202, 14: 243, 29: 230, 189: 210,
                   99: 120, 205: 75, 166: 92, 67: 50, 129: 37, 195: 145, 247: 27, 101: 44, 9: 237, 134: 209, 45: 94,
                   192: 69, 117: 218, 181: 190, 227: 201, 159: 103, 139: 162, 167: 142, 93: 38, 76: 60, 98: 253,
                   22: 25, 24: 125, 246: 15, 96: 240, 198: 132, 19: 191, 223: 137, 78: 178, 31: 10, 11: 126, 77: 74,
                   26: 197, 151: 128, 176: 242, 152: 13, 212: 88, 81: 123, 146: 131, 213: 1, 144: 207, 170: 203,
                   199: 28, 255: 59, 168: 64, 107: 157, 106: 124, 183: 109, 70: 254, 34: 84, 184: 196, 174: 133,
                   110: 250, 156: 249, 18: 105, 163: 79, 65: 90, 194: 5, 211: 153, 208: 206, 177: 150, 238: 236,
                   231: 63, 7: 46, 56: 42, 16: 97, 72: 89, 141: 228, 220: 186, 136: 219, 108: 55, 127: 53, 188: 148,
                   68: 215, 165: 175, 113: 140, 4: 143, 83: 121, 58: 185, 173: 12, 233: 66, 49: 217, 32: 3, 229: 54,
                   147: 214, 30: 91, 154: 114, 71: 245, 179: 36, 251: 102, 204: 244, 95: 225, 47: 224, 187: 172,
                   17: 43, 248: 216})
bytere2 = Reflect({101: 3, 211: 236, 204: 116, 19: 4, 157: 48, 46: 35, 58: 127, 249: 230, 226: 25, 105: 52, 60: 212,
                   88: 227, 235: 74, 29: 175, 56: 134, 210: 24, 64: 246, 40: 181, 153: 62, 145: 139, 87: 109, 197: 0,
                   121: 99, 232: 26, 219: 22, 213: 70, 233: 223, 34: 167, 55: 150, 162: 198, 54: 85, 224: 49,
                   119: 196, 215: 69, 132: 177, 176: 33, 254: 125, 107: 106, 133: 32, 173: 220, 38: 195, 130: 138,
                   216: 111, 152: 205, 154: 225, 208: 16, 42: 131, 128: 78, 183: 108, 209: 68, 47: 27, 188: 189,
                   100: 103, 17: 83, 184: 43, 242: 8, 217: 182, 141: 151, 174: 221, 71: 5, 30: 158, 77: 222, 255: 18,
                   142: 9, 163: 28, 248: 136, 180: 250, 237: 192, 91: 112, 144: 90, 155: 79, 6: 120, 149: 86, 1: 15,
                   59: 7, 2: 53, 191: 243, 14: 66, 113: 122, 179: 135, 194: 228, 104: 118, 148: 31, 115: 200, 37: 251,
                   156: 63, 50: 178, 207: 203, 231: 234, 252: 126, 168: 80, 171: 166, 12: 170, 93: 95, 146: 229,
                   10: 57, 238: 239, 201: 187, 23: 169, 190: 240, 123: 241, 245: 45, 84: 129, 143: 247, 13: 206,
                   89: 147, 65: 51, 218: 165, 114: 73, 20: 81, 185: 124, 193: 161, 186: 159, 137: 253, 39: 76,
                   21: 117, 61: 102, 94: 202, 92: 97, 41: 67, 98: 36, 110: 244, 172: 44, 11: 214, 96: 160, 82: 199,
                   72: 140, 164: 75})
bytere3 = Reflect({220: 48, 185: 215, 192: 146, 57: 202, 81: 239, 43: 254, 190: 41, 115: 158, 212: 31, 124: 218,
                   101: 7, 80: 87, 136: 104, 24: 14, 86: 64, 74: 68, 179: 132, 236: 157, 20: 125, 211: 195, 83: 37,
                   106: 186, 123: 156, 54: 58, 167: 250, 226: 97, 114: 242, 95: 216, 42: 76, 67: 51, 23: 228, 247: 91,
                   240: 107, 166: 196, 77: 131, 40: 47, 151: 30, 4: 56, 90: 214, 148: 119, 153: 163, 102: 235, 75: 69,
                   46: 251, 222: 178, 53: 32, 232: 173, 143: 105, 200: 168, 141: 209, 82: 189, 174: 36, 187: 34,
                   182: 71, 205: 60, 184: 108, 0: 73, 98: 135, 244: 171, 201: 65, 49: 59, 99: 15, 138: 121, 217: 84,
                   100: 172, 252: 50, 134: 133, 62: 88, 116: 113, 122: 213, 164: 128, 160: 118, 92: 5, 154: 70,
                   1: 234, 38: 249, 147: 245, 3: 170, 103: 10, 221: 180, 255: 237, 96: 144, 193: 45, 6: 19, 152: 127,
                   219: 231, 93: 142, 16: 208, 230: 225, 140: 243, 112: 203, 191: 22, 150: 177, 44: 89, 198: 224,
                   39: 18, 126: 33, 94: 238, 35: 63, 55: 229, 210: 21, 85: 11, 27: 253, 246: 199, 223: 26, 72: 145,
                   155: 79, 162: 109, 29: 207, 181: 149, 161: 183, 139: 204, 13: 9, 12: 61, 117: 169, 111: 120,
                   194: 241, 197: 137, 78: 159, 175: 66, 130: 25, 188: 28, 227: 248, 165: 176, 206: 110, 233: 52,
                   8: 129, 17: 2})
bytere4 = Reflect({183: 77, 216: 9, 15: 149, 36: 239, 103: 48, 81: 167, 115: 160, 52: 182, 194: 73, 112: 123,
                   212: 240, 191: 71, 186: 247, 141: 188, 90: 243, 146: 162, 28: 121, 151: 254, 223: 5, 75: 86,
                   6: 227, 153: 220, 20: 134, 63: 27, 3: 244, 61: 68, 80: 92, 250: 171, 224: 45, 210: 84, 93: 18,
                   130: 180, 24: 118, 50: 139, 2: 21, 226: 218, 174: 82, 205: 234, 177: 161, 164: 0, 207: 96,
                   228: 232, 193: 184, 107: 101, 181: 64, 136: 219, 169: 128, 74: 129, 204: 109, 138: 72, 35: 43,
                   55: 59, 88: 214, 124: 119, 122: 114, 37: 142, 94: 192, 47: 248, 165: 199, 41: 178, 144: 127,
                   241: 157, 69: 16, 163: 89, 62: 154, 132: 22, 105: 137, 32: 185, 143: 252, 85: 133, 198: 116,
                   46: 99, 14: 30, 54: 106, 95: 253, 221: 231, 176: 209, 100: 38, 29: 108, 10: 79, 147: 215, 225: 76,
                   208: 140, 98: 11, 135: 148, 159: 236, 203: 211, 42: 66, 117: 113, 78: 31, 4: 237, 217: 201,
                   242: 40, 58: 91, 189: 33, 179: 102, 65: 195, 19: 238, 39: 126, 70: 200, 97: 12, 60: 202, 196: 175,
                   246: 235, 83: 158, 120: 206, 233: 155, 1: 145, 8: 13, 150: 110, 7: 49, 255: 172, 125: 156, 44: 249,
                   25: 17, 170: 111, 213: 187, 245: 87, 222: 230, 251: 168, 51: 190, 57: 131, 34: 152, 53: 173,
                   104: 23, 56: 26, 229: 197, 67: 166})
bytetools.reflects(bytere1, bytere2, bytere3, bytere4)


def random_tools():
    randomtools = ToolsGroup()

    def swap():
        r = list(range(0, 256))
        r.sort(key=lambda x: random.random())
        d = {}
        for ind in range(100):
            d[r[ind]] = r[ind + 100]
        return d

    def wheel():
        r = list(range(0, 256))
        r.sort(key=lambda x: random.random())
        return r

    def reflect():
        r = list(range(0, 256))
        r.sort(key=lambda x: random.random())
        d = {}
        for ind in range(128):
            d[r[ind]] = r[ind + 128]
        return d

    sw = []
    for i in range(10):
        sw.append(Swap(swap()))
    randomtools.swaps(*sw)

    wh = []
    for i in range(10):
        wh.append(Wheel(*wheel()))
    randomtools.wheels(*wh)

    re = []
    for i in range(10):
        re.append(Reflect(reflect()))
    randomtools.reflects(*re)

    randomtools.translate(ByteTran)

    return randomtools


def pickle_tools(tools, file):
    p = pickle.dumps(tools)
    with open(file, 'wb') as f:
        f.write(p)
    return hashlib.md5(p).hexdigest()


def unpickle(file, md5):
    with open(file, 'rb') as f:
        p = f.read()
    if md5 != hashlib.md5(p).hexdigest():
        if md5 != 'ignore':
            raise Exception("MD5 value isn't match to pickle.")
        else:
            print("[NOTE] MD5 value isn't match to pickle.")
    return pickle.loads(p)


class Message:
    tools = None
    message = ''


def send_message(message, path):
    tools = random_tools()
    (e, info) = tools.random(8)
    start = [random.randint(0, 255) for i in range(8)]
    info = info + (tuple(start),)
    e.set_position(*start)
    message = e.encipher(message)
    me = Message()
    me.tools = tools
    me.message = message
    md5 = pickle_tools(me, os.path.join(path, "message.pickle"))
    with open(os.path.join(path, "message.md5"), 'w') as file:
        file.write(md5)
    print("Message object and its MD5 value have been saved into "
          f"file {os.path.join(path, 'message.pickle')} and {os.path.join(path, 'message.md5')}")
    print('Please send this two file above to the receiver.')
    print('=' * 80)
    print('*Private* Information Below, please keep it a secret and send it to the receiver.')
    print('Swap:', info[0])
    print('Wheels:', info[1])
    print('Reflect:', info[2])
    print('Start position:', info[3])
    print('Code: ', info)


def receive_message(path, info):
    with open(os.path.join(path, 'message.md5')) as file:
        md5 = file.read()
    message = unpickle(os.path.join(path, 'message.pickle'), md5)
    tools = message.tools
    message = message.message
    e = tools.make_up(info[0], info[1], info[2])
    e.set_position(*info[3])
    message = e.encipher(message, 'return char')
    print('Message'.center(80, '='))
    print(message)
